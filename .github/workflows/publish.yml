name: Publish to PyPI

on:
  workflow_dispatch:

jobs:
  # CIワークフローを先に実行
  ci:
    uses: ./.github/workflows/ci.yml

  # CI失敗時の通知ジョブ
  ci-failure:
    needs: ci
    if: ${{ needs.ci.result == 'failure' }}
    runs-on: ubuntu-latest
    steps:
      - name: CI Failed
        run: |
          echo "::error::CI workflow failed. Publication cancelled."
          echo "Please fix the CI issues before attempting to publish."
          exit 1

  publish:
    needs: ci
    if: ${{ needs.ci.result == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Check CI success
        run: |
          echo "CI workflow completed successfully"
          echo "Proceeding with package publication"
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Debug package metadata
        run: |
          echo "=== Package metadata debug ==="
          if [ -f "pyproject.toml" ]; then
            echo "pyproject.toml contents:"
            cat pyproject.toml
          fi
          if [ -f "setup.py" ]; then
            echo "setup.py contents:"
            cat setup.py
          fi
          echo "=== Git describe ==="
          git describe --tags --dirty --always
          echo "=== setuptools_scm version ==="
          python -c "import setuptools_scm; print(setuptools_scm.get_version())" || echo "setuptools_scm not available"

      - name: Build package
        run: uv build

      - name: Debug built package
        run: |
          echo "=== Built package files ==="
          ls -la dist/
          echo "=== Package metadata ==="
          uv add pkginfo
          for file in dist/*.whl dist/*.tar.gz; do
            echo "--- $file ---"
            uv run python -c "import pkginfo; p=pkginfo.get_metadata('$file'); print(f'Name: {p.name}'); print(f'Version: {p.version}'); print(f'Summary: {p.summary}')"
          done

      - name: Test upload with verbose output
        run: |
          uv add twine
          echo "=== Testing upload with twine (verbose) ==="
          uv run twine check dist/*
          uv run twine upload --repository testpypi dist/* --verbose --username __token__ --password ${{ secrets.TEST_PYPI_API_TOKEN }}
        continue-on-error: true

      - name: Publish to TestPyPI (fallback)
        if: failure()
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          verbose: true
