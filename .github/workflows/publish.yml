name: Publish to PyPI

on:
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Mermaid CLI
        run: npm install -g @mermaid-js/mermaid-cli

      - name: Install dependencies
        run: |
          pip install uv
          uv pip install --system '.[dev]'

      - name: Verify CI configuration
        run: |
          echo "Checking Puppeteer config for CI environment..."
          ls -la .github/puppeteer.config.json
          cat .github/puppeteer.config.json

      - name: Run tests and quality checks
        run: |
          uv run pytest
          uv run ruff check .
          uv run mypy src/ --strict

      - name: Debug package metadata
        run: |
          echo "=== Package metadata debug ==="
          if [ -f "pyproject.toml" ]; then
            echo "pyproject.toml contents:"
            cat pyproject.toml
          fi
          if [ -f "setup.py" ]; then
            echo "setup.py contents:"
            cat setup.py
          fi
          echo "=== Git describe ==="
          git describe --tags --dirty --always
          echo "=== setuptools_scm version ==="
          python -c "import setuptools_scm; print(setuptools_scm.get_version())" || echo "setuptools_scm not available"

      - name: Build package
        run: |
          pip install build
          python -m build

      - name: Debug built package
        run: |
          echo "=== Built package files ==="
          ls -la dist/
          echo "=== Package metadata ==="
          pip install pkginfo
          for file in dist/*.whl dist/*.tar.gz; do
            echo "--- $file ---"
            python -c "import pkginfo; p=pkginfo.get_metadata('$file'); print(f'Name: {p.name}'); print(f'Version: {p.version}'); print(f'Summary: {p.summary}')"
          done

      - name: Test upload with verbose output
        run: |
          pip install twine
          echo "=== Testing upload with twine (verbose) ==="
          twine check dist/*
          twine upload --repository testpypi dist/* --verbose --username __token__ --password ${{ secrets.TEST_PYPI_API_TOKEN }}
        continue-on-error: true

      - name: Publish to TestPyPI (fallback)
        if: failure()
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          verbose: true
