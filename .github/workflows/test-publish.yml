name: Publish to TestPyPI

on:
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Mermaid CLI
        run: npm install -g @mermaid-js/mermaid-cli

      - name: Install dependencies
        run: |
          pip install uv
          uv pip install --system '.[dev]'

      - name: Verify CI configuration
        run: |
          echo "Checking Puppeteer config for CI environment..."
          ls -la .github/puppeteer.config.json
          cat .github/puppeteer.config.json

      - name: Run tests and quality checks
        run: |
          uv run pytest
          uv run ruff check .
          uv run mypy src/ --strict

      - name: Create clean version for TestPyPI
        run: |
          # setuptools_scmの設定を一時的に変更してローカルバージョンを除去
          echo "=== Original version ==="
          python -c "import setuptools_scm; print(setuptools_scm.get_version())"

          # 環境変数でローカルバージョンを無効化
          export SETUPTOOLS_SCM_PRETEND_VERSION_FOR_MKDOCS_MERMAID_TO_IMAGE=$(python -c "
          import setuptools_scm
          version = setuptools_scm.get_version()
          # +以降のローカルバージョン部分を削除
          clean_version = version.split('+')[0]
          print(clean_version)
          ")
          echo "SETUPTOOLS_SCM_PRETEND_VERSION_FOR_MKDOCS_MERMAID_TO_IMAGE=$SETUPTOOLS_SCM_PRETEND_VERSION_FOR_MKDOCS_MERMAID_TO_IMAGE" >> $GITHUB_ENV

          echo "=== Clean version ==="
          echo $SETUPTOOLS_SCM_PRETEND_VERSION_FOR_MKDOCS_MERMAID_TO_IMAGE

      - name: Build package with clean version
        run: |
          pip install build
          echo "Building with version: $SETUPTOOLS_SCM_PRETEND_VERSION_FOR_MKDOCS_MERMAID_TO_IMAGE"
          python -m build

      - name: Verify built package version
        run: |
          echo "=== Built package files ==="
          ls -la dist/
          echo "=== Package version verification ==="
          pip install pkginfo
          for file in dist/*.whl dist/*.tar.gz; do
            echo "--- $file ---"
            python -c "
            import pkginfo
            p = pkginfo.get_metadata('$file')
            print(f'Name: {p.name}')
            print(f'Version: {p.version}')
            if '+' in p.version:
                print('WARNING: Local version detected!')
                exit(1)
            else:
                print('Version is clean for PyPI')
            "
          done

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
